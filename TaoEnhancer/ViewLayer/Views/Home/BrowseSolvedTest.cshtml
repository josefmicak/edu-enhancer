@model IEnumerable<DomainModel.QuestionResult>

@using DomainModel;
@using Common;

@{
    bool studentsTestPointsDetermined = true;
    double? studentsTestPoints = 0;
    string studentsTestPointsString = "";
    EnumTypes.NegativePoints negativePoints = Model.First().QuestionTemplate.TestTemplate.NegativePoints;

    double? testPoints = 0;

    ViewData["Title"] = "Prohlížení vyřešeného testu " + Model.First().TestResultIdentifier;
}

<div class="text-center">
    <h1>Prohlížení vyřešeného testu</h1>

    <div id="test-result">
        <h2>Parametry pokusu</h2>
        <table>
            <tr>
                <th>Identifikátor pokusu</th>
                <td>@Model.First().TestResult.TestResultIdentifier</td>
            </tr>
            <tr>
                <th>Čas vykonání</th>
                <td>@Model.First().TestResult.TimeStamp</td>
            </tr>
            <tr>
                <th>Jméno studenta</th>
                <td>@Model.First().TestResult.Student.FullName()</td>
            </tr>
            <tr>
                <th>Login studenta</th>
                <td>@Model.First().TestResult.Student.Login</td>
            </tr>
            <tr>
                <th>Identifikátor studenta</th>
                <td>@Model.First().TestResult.Student.StudentIdentifier</td>
            </tr>
            <tr>
                <th>Jméno vyučujícího</th>
                <td>@Model.First().TestResult.TestTemplate.Owner.FullName()</td>
            </tr>
        </table>
    </div>

    <div id="question-result-list">
        <h2>Seznam otázek</h2>
        <table>
            <tr>
               <th>Jmenný identifikátor otázky</th>
               <th>Číselný identifikátor otázky</th>
               <th>Nadpis</th>
               <th>Počet bodů</th>
               <th>Prohlížení</th>
            </tr>
            @{
                int i = 0;
                foreach (var item in Model)
                {
                    bool studentsQuestionPointsDetermined = true;
                    double? studentsQuestionPoints = 0;
                    foreach(SubquestionResult subquestionResult in item.SubquestionResultList)
                    {
                        if(subquestionResult.StudentsPoints == null)
                        {
                            studentsQuestionPointsDetermined = false;
                            studentsTestPointsDetermined = false;
                            break;
                        }

                        if (subquestionResult.StudentsPoints < 0 && negativePoints == EnumTypes.NegativePoints.Disabled)
                        {
                            //in case negative points are disabled, the minimum points for every subquestion is 0
                            studentsQuestionPoints += 0;
                        }
                        else
                        {
                            studentsQuestionPoints += subquestionResult.StudentsPoints;
                        }
                    }

                    if (studentsQuestionPoints < 0 && (negativePoints == EnumTypes.NegativePoints.EnabledForQuestion || negativePoints == EnumTypes.NegativePoints.Disabled))
                    {
                        //in case negative points are not enabled, the minimum points for every question is 0
                        studentsTestPoints += 0;
                    }
                    else
                    {
                        studentsTestPoints += studentsQuestionPoints;
                    }

                    double? questionPoints = 0;
                    foreach(SubquestionTemplate subquestionTemplate in item.QuestionTemplate.SubquestionTemplateList)
                    {
                        questionPoints += subquestionTemplate.SubquestionPoints;
                    }
                    testPoints += questionPoints;

                    string studentsQuestionPointsString = "";
                    if(!studentsQuestionPointsDetermined)
                    {
                        studentsQuestionPointsString = "N/A";
                    }
                    else
                    {
                        if (negativePoints == EnumTypes.NegativePoints.EnabledForQuestion && studentsQuestionPoints < 0)
                        {
                            studentsQuestionPoints = 0;
                        }
                        studentsQuestionPointsString = studentsQuestionPoints.ToString() + " / " + questionPoints.ToString();
                    }

                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.QuestionTemplate.QuestionNameIdentifier)</td>
                        <td>@Html.DisplayFor(modelItem => item.QuestionTemplate.QuestionNumberIdentifier)</td>
                        <td>@Html.DisplayFor(modelItem => item.QuestionTemplate.Title)</td>
                        <td>@studentsQuestionPointsString</td>
                        <td><a class="button" id="questionResultBtn_@i" title="Zobrazit otázku" asp-area="" asp-controller="Home" asp-action="BrowseSolvedQuestion"
                        asp-route-questionNumberIdentifier="@item.QuestionTemplate.QuestionNumberIdentifier"
                        asp-route-testResultIdentifier="@Model.First().TestResult.TestResultIdentifier"
                        asp-route-ownerLogin="@Model.First().OwnerLogin">Správa otázky</a>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>

    @{
        if(!studentsTestPointsDetermined)
        {
            studentsTestPointsString = "N/A";
        }
        else
        {
            if (negativePoints == EnumTypes.NegativePoints.EnabledForQuestion && studentsTestPoints < 0)
            {
                studentsTestPoints = 0;
            }
            studentsTestPointsString = studentsTestPoints.ToString() + " / " + testPoints;
        }

        string? studentsMinimumPointsString = string.Empty;
        if (Model.First().QuestionTemplate.TestTemplate.MinimumPoints != null)
        {
            double? minimumPoints = Model.First().QuestionTemplate.TestTemplate.MinimumPoints;
            studentsMinimumPointsString += minimumPoints.ToString();
            if (minimumPoints > studentsTestPoints)
            {
                studentsMinimumPointsString += " - pokus neúspěšný ";
            }
            else
            {
                studentsMinimumPointsString += " - pokus úspěšný ";
            }
            studentsMinimumPointsString += "(" + studentsTestPoints.ToString() + " / " + minimumPoints.ToString() + ")";
        }
    }

    <div id="test-template">
        <h2>Parametry testu</h2>
        <table>
            <tr>
                <th>Jmenný identifikátor testu</th>
                <td>@Model.First().QuestionTemplate.TestTemplate.TestNameIdentifier</td>
            </tr>
            <tr>
                <th>Číselný identifikátor testu</th>
                <td>@Model.First().QuestionTemplate.TestTemplate.TestNumberIdentifier</td>
            </tr>
            <tr>
                <th>Nadpis</th>
                <td>@Model.First().QuestionTemplate.TestTemplate.Title</td>
            </tr>
            <tr>
                <th>Počet otázek</th>
                <td>@Model.Count()</td>
            </tr>
            <tr>
                <th>Počet bodů</th>
                <td>@studentsTestPointsString</td>
            </tr>
            @{
                if (Model.First().QuestionTemplate.TestTemplate.MinimumPoints != null)
                {
                    <tr>
                        <th>Minimální počet bodů</th>
                        <td>@studentsMinimumPointsString</td>
                    </tr>
                }
            }
        </table>
    </div>
</div>

<div id="backBtn"><a asp-action="BrowseSolvedTestList"
        asp-route-studentIdentifier="@Model.First().TestResult.Student.StudentIdentifier">Zpět</a></div>

<div id="signOutBtn"><a asp-controller="Account" asp-action="GoogleSignOut">Odhlásit se</a></div>